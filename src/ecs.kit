import kit.map;
import utils.set;

enum EntityState{
    COMPONENT_ADDED;
    COMPONENT_REMOVED;

    public function toString(): CString{
        match this{
            COMPONENT_ADDED => return "added";
            COMPONENT_REMOVED => return "removed";
        }
    }
}

trait Component {
    function typeIdentifier(): CString;
    public function base(): Ptr[Void]{
        return &this;
    }
}

trait System {
    public function update(delta: Float): Void;
    function typeIdentifier(): CString;
    public function base(): Ptr[Void]{
        return &this;
    }
}

struct Entity {
    private var components: Map[CString, Box[Component]]; 
    private var allocator: Box[Allocator];
    public var uniqueID: Int;
    public var name: CString;
    private var engine: Ptr[Engine];
    
    private static var id: Int = 0;

    public static function new(allocator: Box[Allocator], name: CString): Entity using implicit allocator {
        var components = Map.new(10);
        var uniqueID: Int = Entity.id++;

        return struct Self {
            components,
            allocator,
            uniqueID,
            name,
        };
    }

    public function addComponent(component: Box[Component]) {
        if !this.containsComponent(component.typeIdentifier())  {
            this.components.put(component.typeIdentifier(), component);
            this.notifiyChange(EntityState.COMPONENT_ADDED, component.typeIdentifier());
        }
        else {
            this.components.remove(component.typeIdentifier());
            this.components.put(component.typeIdentifier(), component);
        }
    }

    public function getComponent(typeIdentifier: CString): Option[Box[Component]] {
        if this.components.exists(typeIdentifier) {
            return this.components.get(typeIdentifier);
        }
        return None;
    }

    public function getComponents(): Array[CString] {
        return this.components.keys();
    }

    public function containsComponent(type: CString): Bool {
        return this.components.exists(type);
    }

    public function removeComponent(typeIdentifier: CString): Void {
        if(this.containsComponent(typeIdentifier)){
            this.components.remove(typeIdentifier);
            this.notifiyChange(EntityState.COMPONENT_REMOVED, typeIdentifier);
        }
    }

    private function notifiyChange(change: EntityState, typeIdentifier: CString){
        this.engine.entityHasChanged(change, typeIdentifier, this.uniqueID);
    }
}

struct Engine {
    private var entities: Map[Int, Ptr[Entity]];
    private var systems: Map[CString, Box[System]];
    private var entitesToComponent: Map[CString, Set[Int]];
    private var allocator: Box[Allocator];

    public static function new(allocator: Box[Allocator]): Engine using implicit allocator {
        var entities: Map[Int, Ptr[Entity]] = Map.new(10);
        var systems: Map[CString, Box[System]] = Map.new(10);
        var entitesToComponent: Map[CString, Set[Int]] = Map.new(10);

        return struct Self {
            entities,
            systems,
            entitesToComponent,
            allocator
        };
    }

    public function addEntity(entity: Ptr[Entity]) {
        

        if(!this.entities.exists(entity.uniqueID)) {
            this.entities.put(entity.uniqueID, entity);
            entity.engine = &this;

            var list = entity.getComponents();

            for type in list{
                if(!this.entitesToComponent.exists(type)) {
                    this.entitesToComponent.put(type, Set.new());
                }
                this.addComponentFromEntity(type, entity.uniqueID);
            }
        }
    }

    public function removeEntity(entity: Entity) {
        if(this.entities.exists(entity.uniqueID)) {
            this.entities.remove(entity.uniqueID);

            var list = entity.getComponents();

            for type in list{
                if(this.entitesToComponent.exists(type)) {
                    this.removeComponentFromEntity(type, entity.uniqueID);
                }
            }
        }
    }

    public function entityHasChanged(change: EntityState, typeIdentifier: CString, entityID: Int){
        printf("Entity: %i, has %s, Component: %s\n", entityID, change.toString(), typeIdentifier);

        match(change.toString()){
            "added" => this.addComponentFromEntity(typeIdentifier, entityID);
            "removed" => this.removeComponentFromEntity(typeIdentifier, entityID);
        }
    }

    private function addComponentFromEntity(type: CString, en: Int){
        if(this.entitesToComponent.exists(type)){
            var entitySet: Set[Int] = this.entitesToComponent.get(type).unwrap();
            entitySet.put(en);
        }
    }

    private function removeComponentFromEntity(type: CString, en: Int){
        if(this.entitesToComponent.exists(type)){
            var entitySet: Set[Int] = this.entitesToComponent.get(type).unwrap();
            entitySet.remove(en);
        }
    }

    public function addSystem(type: CString, system: Box[System]) {
        if(!this.systems.exists(type)){
            this.systems.put(type, system);
        }
    }

    public function removeSystem(type: CString, system: Box[System]) {
        if(!this.systems.exists(type)){
            this.systems.remove(type);
        }
    }

    public function entitiesForComponent(type: CString): Array[Ptr[Entity]] {
        if this.entitesToComponent.exists(type) {
            var entitySet = this.entitesToComponent.get(type).unwrap();
            var entityArray: Array[Ptr[Entity]] = Array.new(entitySet.length); 
            var i = 0;
            for key in entitySet{
                entityArray[i] = this.entities.get(key).unwrap();
                i++;
            }
        }
    }

    public function update(delta: Float) {
        for key in this.systems {
            this.systems.get(key).unwrap().update(delta);
        }
    }
}