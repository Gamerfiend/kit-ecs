/**
 *  An ECS library written in kit
 *  @author Tyler Bezera
 */

import kit.map;
import kit.set;

/**
 * Enum which describes an event state for which an Entity may be in, used in case an Entity has a 
 * Component added or removed at runtime.
 *
 */
enum EntityState{
    COMPONENT_ADDED;
    COMPONENT_REMOVED;

    public function toString(): CString{
        match this{
            COMPONENT_ADDED => return "added";
            COMPONENT_REMOVED => return "removed";
        }
    }
}

/**
 * Component trait, any component struct must implement
 */
trait Component {

    /**
     * Return the unique type for this component, i.e "Position"
     * @return {CString}
     */
    function typeIdentifier(): CString;

    /**
     * Returns a pointer to the base component hidden by this trait, when this
     * is used with casting to a type, as PositionComponent, you can access underlying component fields
     * @return {Ptr[Void]}
     */
    public function base(): Ptr[Void]{
        return &this;
    }
}

/**
 * System trait, any system must implement this
 */
trait System {
    public static var engine: Ptr[Engine]; 

    /**
     * Update function once per iteration, based on delta time passed to engine.
     * @param {Float} delta - The time since the last frame
     * @param {Ptr[Engine]} engine - Reference to the engine this system belongs to, used for querying components
     */
    public function update(delta: Float, engine: Ptr[Engine]): Void;

    /**
     * Return the unique type for this component, i.e "Position"
     * @return {CString}
     */
    public function typeIdentifier(): CString;

    /**
     * Returns a pointer to the base system hidden by this trait, when this
     * is used with casting to a type, as MovementSystem, you can access underlying system field
     * @return {Ptr[Void]}
     */
    public function base(): Ptr[Void]{
        return &this;
    }
}

struct Entity {
    private var components: Map[CString, Box[Component]]; 
    private var allocator: Box[Allocator];
    public var uniqueID: Int;
    public var name: CString;
    private var tags: Set[CString];
    private var engine: Ptr[Engine];
    
    private static var id: Int = 0;

    public static function new(allocator: Box[Allocator], name: CString): Entity using implicit allocator {
        var components = Map.new(10);
        var uniqueID: Int = Entity.id++;
        var tags = Set.new();

        return struct Self {
            components,
            allocator,
            uniqueID,
            name,
            tags
        };
    }

    public function addComponent(component: Box[Component]) {
        if !this.containsComponent(component.typeIdentifier())  {
            this.components.put(component.typeIdentifier(), component);
        }
        else {
            this.components.remove(component.typeIdentifier());
            this.components.put(component.typeIdentifier(), component);
        }
        this.notifiyChange(EntityState.COMPONENT_ADDED, component.typeIdentifier());
    }

    public function getComponent(typeIdentifier: CString): Option[Box[Component]] {
        if this.components.exists(typeIdentifier) {
            return this.components.get(typeIdentifier);
        }
        return None;
    }

    public function getComponents(): Array[CString] {
        return this.components.keys();
    }

    public function containsComponent(type: CString): Bool {
        return this.components.exists(type);
    }

    public function removeComponent(typeIdentifier: CString): Void {
        if(this.containsComponent(typeIdentifier)){
            this.components.remove(typeIdentifier);
            this.notifiyChange(EntityState.COMPONENT_REMOVED, typeIdentifier);
        }
    }

    public function addTag(tag: CString): Void {
        this.tags.put(tag);
    }

    public function hasTag(tag: CString): Bool {
        if this.tags.exists(tag) then return true else return false;
    }

    public function removeTag(tag: CString): Void {
        this.tags.remove(tag);
    }

    private function notifiyChange(change: EntityState, typeIdentifier: CString){
        this.engine.entityHasChanged(change, typeIdentifier, this.uniqueID);
    }
}

struct Engine {
    private var entities: Map[Int, Ptr[Entity]];
    private var systems: Map[CString, Box[System]];
    private var entitesToComponent: Map[CString, Set[Int]];
    private var allocator: Box[Allocator];

    public static function new(allocator: Box[Allocator]): Engine using implicit allocator {
        var entities: Map[Int, Ptr[Entity]] = Map.new(10);
        var systems: Map[CString, Box[System]] = Map.new(10);
        var entitesToComponent: Map[CString, Set[Int]] = Map.new(10);

        return struct Self {
            entities,
            systems,
            entitesToComponent,
            allocator
        };
    }

    public function addEntity(entity: Ptr[Entity]) {
        if(!this.entities.exists(entity.uniqueID)) {
            this.entities.put(entity.uniqueID, entity);
            entity.engine = &this;

            var list = entity.getComponents();
            for type in list{
                if(!this.entitesToComponent.exists(type)) {
                    this.entitesToComponent.put(type, Set.new());
                }
                this.addComponentFromEntity(type, entity.uniqueID);
            }
        }
    }

    public function removeEntity(entity: Entity) {
        if(this.entities.exists(entity.uniqueID)) {
            this.entities.remove(entity.uniqueID);

            var list = entity.getComponents();

            for type in list{
                if(this.entitesToComponent.exists(type)) {
                    this.removeComponentFromEntity(type, entity.uniqueID);
                }
            }
        }
    }

    public function entityHasChanged(change: EntityState, typeIdentifier: CString, entityID: Int){
        printf("Entity: %i, has %s, Component: %s\n", entityID, change.toString(), typeIdentifier);

        match(change.toString()){
            "added" => this.addComponentFromEntity(typeIdentifier, entityID);
            "removed" => this.removeComponentFromEntity(typeIdentifier, entityID);
        }
    }

    private function addComponentFromEntity(type: CString, en: Int){
        if(this.entitesToComponent.exists(type)){
            var entitySet: Set[Int] = this.entitesToComponent.get(type).unwrap();
            entitySet.put(en);
        }
        else{
            var entitySet: Set[Int] = Set.new();
            entitySet.put(en);
            this.entitesToComponent.put(type,entitySet);
        }
    }

    private function removeComponentFromEntity(type: CString, en: Int){
        if(this.entitesToComponent.exists(type)){
            var entitySet: Set[Int] = this.entitesToComponent.get(type).unwrap();
            entitySet.remove(en);
        }
    }

    public function addSystem(type: CString, system: Box[System]) {
        if(!this.systems.exists(type)){
            this.systems.put(type, system);
        }
    }

    public function removeSystem(type: CString, system: Box[System]) {
        if(!this.systems.exists(type)){
            this.systems.remove(type);
        }
    }

    public function entitiesForComponents(components: Int, types...): Array[Ptr[Entity]] {

        var entitySet: Set[Int] = Set.new();
        for i in 0 ... components{
            var component: CString = types;
            var setRef = this.entitesToComponent.get(component).unwrap();
            
            entitySet.unionSet(setRef);
        } 

        var entityArray: Array[Ptr[Entity]] = Array.new(entitySet.length);
        
        var i = 0;
        for entity in entitySet{
            entityArray[i] = this.entities.get(entity).unwrap();
            i++;
        }

        return entityArray;
    }

    public function entitiesForComponent(type: CString): Array[Ptr[Entity]] {
        if(this.entitesToComponent.exists(type)) {
            var entitySet = this.entitesToComponent.get(type).unwrap();
            var entityArray: Array[Ptr[Entity]] = Array.new(entitySet.length); 
            var i = 0;
            for key in entitySet{
                entityArray[i] = this.entities.get(key).unwrap();
                i++;
            }

            return entityArray;
        }
    }

    public function update(delta: Float) {
        for key in this.systems {
            this.systems.get(key).unwrap().update(delta, this);
        }
    }
}