import ecs;

struct PositionComponent{
    var x: Float;
    var y: Float;
    var z: Float;
}

struct PositionSystem{
    var blah: Int;
}

implement System for PositionSystem{

    public function update(delta: Float, engine: Ptr[Engine]): Void{
        var entityArray = engine.entitiesForComponent("Position");

        for entity in entityArray{
            printf("Entity: %s\n", entity.name);
        }

        printf("Array Length: %i\n", entityArray.length);
        printf("%i\n", engine.entities.length);
        printf("%i\n", engine.entitesToComponent.length);
    }
    function typeIdentifier(): CString {
        return "Position";
    }
}

implement Component for PositionComponent{
    function typeIdentifier(): CString{
        return "Position";
    }
}

function main()
{
    var entity1 : Entity = Entity.new("Apple");
    var engine: Engine = Engine.new();

    var positionComponent = struct PositionComponent{
        x: 12.0,
        y: 12.0,
        z: 12.0
    };


    engine.addEntity(entity1);
    entity1.addComponent(positionComponent);
    //var returnedBoxedComponent: Box[Component] = entity1.getComponent("Position").unwrap();

    //var positionPtr: Ptr[PositionComponent] = returnedBoxedComponent.base();

    var posSystem = struct PositionSystem{
        blah: 1
    };

    engine.addSystem("Position", posSystem);
    //printf("%f\n", positionPtr.x);
    
    engine.update(2.2);



}